#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 21 23:48:56 2017

@author: mshokry
"""

import time
from solution import *
filename = "top95.txt"
def from_file(filename, sep='\n'):
    "Parse a file into a list of strings, separated by sep."
    with open(filename, 'r') as f:
        data = f.read()
        return data.strip().split(sep)

sudo = from_file(filename)

su ='..9...4.57....3.1..1..............282.3......6.8......34.1..2....................'

su1 = '..7..5..2.......13.........9...8.7......7...5..2.......1..3.......54.......7....4'

su2 = '..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3..'

for su in sudo:
    t0 =  time.time()
    sol = solve(su)
    t1 = time.time()
    #print (sol)
    print("Time = ",t1-t0)
    if sol != False and sol != None :
        display(sol)
        
val = {"I6": "23678", "E8": "1", "G9": "24578", "C9": "124578", "C5":
"23456789", "E4": "2", "H5": "23456789", "A5": "1", "I3": "23456",
"A8": "345689", "B3": "1234569", "F6": "37", "I1": "2345678", "D5":
"36", "A4": "34568", "C3": "1234569", "C2": "1234568", "C6": "236789",
"F3": "24", "H7": "2345678", "D1": "36", "C4": "345678", "G7":
"2345678", "B9": "124578", "H3": "1234569", "D9": "47", "F4": "9",
"F1": "1", "D2": "9", "G5": "23456789", "E9": "3", "F2": "24", "D4":
"1", "I5": "2345678", "I4": "345678", "H9": "24578", "F7": "58", "B4":
"345678", "D6": "5", "D7": "47", "A3": "7", "H8": "345678", "A9":
"2458", "H2": "12345678", "G3": "1234569", "F5": "37", "E5": "678",
"E6": "4", "C8": "3456789", "F8": "58", "E2": "567", "B2": "1234568",
"B8": "3456789", "B7": "2345678", "C1": "2345689", "H4": "345678",
"B6": "236789", "A1": "2345689", "C7": "2345678", "E7": "9", "A6":
"23689", "G4": "345678", "I2": "2345678", "A7": "234568", "A2":
"234568", "I8": "345678", "G2": "12345678", "D3": "8", "D8": "2",
"H1": "23456789", "F9": "6", "I7": "1", "B5": "23456789", "H6":
"1236789", "E1": "567", "G1": "23456789", "B1": "2345689", "G8":
"345678", "I9": "9", "E3": "56", "G6": "1236789"}
val1 =   {"D7": "47", "C4": "345678", "G8": "345678", "E4": "2", "F9": "6",
"F7": "58", "G5": "23456789", "I5": "2345678", "A1": "2345689", "B4":
"345678", "G6": "1236789", "C9": "124578", "A8": "345689", "D5": "36",
"F8": "58", "E1": "567", "B5": "23456789", "E3": "56", "E8": "1",
"C7": "2345678", "G7": "2345678", "D9": "47", "A6": "23689", "G4":
"345678", "D2": "9", "A9": "2458", "B1": "2345689", "C6": "236789",
"F4": "9", "D1": "36", "G3": "1234569", "A2": "234568", "F2": "24",
"E9": "3", "B7": "2345678", "C3": "1234569", "C2": "1234568", "I8":
"345678", "H1": "23456789", "E6": "4", "C8": "3456789", "H6":
"1236789", "B2": "1234568", "A7": "234568", "I1": "2345678", "B6":
"236789", "C5": "23456789", "G9": "24578", "H7": "2345678", "I3":
"23456", "H4": "345678", "I4": "345678", "F3": "24", "E7": "9", "H3":
"1234569", "H5": "23456789", "E2": "567", "I2": "2345678", "G2":
"12345678", "F5": "37", "F6": "37", "I7": "1", "H2": "12345678", "G1":
"23456789", "I6": "23678", "E5": "678", "B8": "3456789", "H9":
"24578", "D6": "5", "B9": "124578", "D4": "1", "B3": "1234569", "F1":
"1", "C1": "2345689", "D3": "8", "A5": "1", "D8": "2", "A4": "34568",
"I9": "9", "H8": "345678", "A3": "7"}

valo={"G9": "24578", "C9": "124578", "G1": "23456789", "I3": "23456", "B3":
"1234569", "F6": "37", "C2": "1234568", "C6": "236789", "C4":
"345678", "B9": "124578", "G5": "23456789", "E9": "3", "E1": "567",
"H9": "24578", "F7": "58", "H2": "12345678", "D7": "47", "A3": "7",
"H8": "345678", "A9": "2458", "H7": "2345678", "C1": "2345689", "E2":
"567", "B2": "1234568", "B8": "3456789", "B6": "236789", "A1":
"2345689", "A6": "23689", "G4": "345678", "I2": "2345678", "A2":
"234568", "D3": "8", "D8": "2", "H1": "23456789", "I7": "1", "H6":
"1236789", "D6": "5", "B1": "2345689", "I9": "9", "G8": "345678",
"I6": "23678", "F9": "6", "C5": "23456789", "E4": "2", "A5": "1",
"A8": "345689", "I1": "2345678", "H5": "23456789", "C3": "1234569",
"F3": "24", "D1": "36", "G7": "2345678", "A4": "34568", "F4": "9",
"F1": "1", "D2": "9", "F2": "24", "I5": "2345678", "I4": "345678",
"B4": "345678", "G3": "1234569", "F5": "37", "E5": "68", "E6": "4",
"C8": "3456789", "F8": "58", "B7": "2345678", "D5": "36", "C7":
"2345678", "H3": "1234569", "D4": "1", "A7": "234568", "I8": "345678",
"E8": "1", "D9": "47", "B5": "23456789", "H4": "345678", "E7": "9",
"G2": "12345678", "E3": "56", "G6": "1236789"}    
valo1 = {"G8": "345678", "E4": "2", "F9": "6", "F7": "58", "A7": "234568",
"A1": "2345689", "B4": "345678", "H2": "12345678", "D5": "36", "E1":
"567", "I5": "2345678", "C7": "2345678", "I2": "2345678", "G4":
"345678", "D3": "8", "B1": "2345689", "C6": "236789", "E7": "9", "D1":
"36", "E3": "56", "A2": "234568", "F2": "24", "D6": "5", "C3":
"1234569", "I8": "345678", "H1": "23456789", "E6": "4", "C8":
"3456789", "A3": "7", "B6": "236789", "C5": "23456789", "G9": "24578",
"H7": "2345678", "I3": "23456", "A8": "345689", "H3": "1234569", "E2":
"567", "G2": "12345678", "F5": "37", "F6": "37", "I7": "1", "G1":
"23456789", "I6": "23678", "I4": "345678", "H9": "24578", "B9":
"124578", "B3": "1234569", "A5": "1", "I9": "9", "D8": "2", "C4":
"345678", "G5": "23456789", "G6": "1236789", "C9": "124578", "F8":
"58", "B5": "23456789", "G7": "2345678", "D9": "47", "A6": "23689",
"D2": "9", "A9": "2458", "F4": "9", "G3": "1234569", "E9": "3", "C2":
"1234568", "E8": "1", "H6": "1236789", "B2": "1234568", "I1":
"2345678", "H4": "345678", "F3": "24", "H5": "23456789", "D7": "47",
"B7": "2345678", "D4": "1", "E5": "68", "B8": "3456789", "F1": "1",
"C1": "2345689", "A4": "34568", "H8": "345678"}

print("input")
display(val)
print("code")
valn = naked_twins(val)
display(valn)
print("out")
display(valo)
print("compare")
compare(valn,valo)
display(valn)


print("input")
display(val1)
print("code")
valn = naked_twins(val1)
display(valn)
print("out")
display(valo1)
print("compare")
compare(valn,val1)
display(valn)


boxes = cross(rows,cols)
def compare(v1,v2):
    vx ={}
    for i in boxes:
        if v1[i] == v2[i]:
            vx.append([i,''])
        else:
            vx.append([i,v1[i]])
    return vx
